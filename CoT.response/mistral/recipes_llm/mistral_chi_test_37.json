[
    {
        "op": "core/mass-edit",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "value",
        "edits": [
            {
                "from": [
                    "STEVES 77 ICE CREAM",
                    "steves 77 ice cream"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Steve's 77 Ice Cream"
            },
            {
                "from": [
                    "CUPCAKES FOR COURAGE"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Cupcakes For Courage"
            },
            {
                "from": [
                    "STARBUCKS COOFEE #279",
                    "STARBUCKS COfee #279"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Starbucks Coffee #279"
            },
            {
                "from": [
                    "Carson (New)",
                    "Carson(New)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Carson (New)"
            },
            {
                "from": [
                    "Carson (Old)",
                    "Carson(Old)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Carson (Old)"
            },
            {
                "from": [
                    "STEVES 77 ICE CREAM",
                    "steves 77 ice cream"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Steve's 77 Ice Cream"
            }
        ],
        "description": "Mass edit cells in column DBA Name"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "value.toUppercase()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression value.toUppercase()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "value.toUppercase()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression value.toUppercase()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "value.trim()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression value.trim()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "value.toUppercase()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression value.toUppercase()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "jython:import re\n   if re.search(r'[^a-zA-Z0-9\\s]', value):\n      return re.sub(r'[^a-zA-Z0-9\\s]', '', value).strip()\n   else:\n      return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression jython:import re\n   if re.search(r'[^a-zA-Z0-9\\s]', value):\n      return re.sub(r'[^a-zA-Z0-9\\s]', '', value).strip()\n   else:\n      return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "jython:import re\\nif re.search(r'CARSON', value):\\n    if '(NEW)' in value:\\n        return 'Carson (New)' \\n    elif '(OLD)' in value:\\n        return 'Carson (Old)' \\nelse if re.search(r'STEVE\\'S', value):\\n    return 'Steve's' \\nelse if re.search(r'STARBUCKS COFFEE', value) and re.search(r'\\#\\d+', value):\\n    return 'Starbucks Coffee #' + value.split('#')[1] \\nelse:\\n    return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression jython:import re\\nif re.search(r'CARSON', value):\\n    if '(NEW)' in value:\\n        return 'Carson (New)' \\n    elif '(OLD)' in value:\\n        return 'Carson (Old)' \\nelse if re.search(r'STEVE\\'S', value):\\n    return 'Steve's' \\nelse if re.search(r'STARBUCKS COFFEE', value) and re.search(r'\\#\\d+', value):\\n    return 'Starbucks Coffee #' + value.split('#')[1] \\nelse:\\n    return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "jython:import re\n   if re.search(r'[^\\w\\s]', value):\n      return re.sub(r'[^\\w\\s]', '', value).strip()\n   elif re.search(r'\\s+', value):\n      return value.replace(' ', '').title()\n   else:\n      return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression jython:import re\n   if re.search(r'[^\\w\\s]', value):\n      return re.sub(r'[^\\w\\s]', '', value).strip()\n   elif re.search(r'\\s+', value):\n      return value.replace(' ', '').title()\n   else:\n      return value\nreturn value"
    },
    {
        "op": "core/mass-edit",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "Inspection Type",
        "expression": "value",
        "edits": [
            {
                "from": [
                    "License Re-inspection"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "License"
            },
            {
                "from": [],
                "fromBlank": false,
                "fromError": false,
                "to": "Canvass"
            }
        ],
        "description": "Mass edit cells in column Inspection Type"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "Results",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column Results using expression value.toNumber()"
    }
]