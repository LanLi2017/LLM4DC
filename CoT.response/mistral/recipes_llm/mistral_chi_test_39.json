[
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "DBA Name",
        "expression": "jython:import re\n   if value == \"\":\n       return None\n   elif re.search(r',', value):\n       return re.sub(r',', '', value)\n   else:\n       return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column DBA Name using expression jython:import re\n   if value == \"\":\n       return None\n   elif re.search(r',', value):\n       return re.sub(r',', '', value)\n   else:\n       return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "Risk",
        "expression": "jython:import re\nmatch_upper = re.search(r'[Rr]isk \\s+ (\\w+)', value, re.IGNORECASE)\nif match_upper:\n    risk_level = match_upper.group(1).lower()\n    return f\"Risk {risk_level}\"\nmatch_colon = re.search(r'(\\w+) \\(([A-Z]+)\\)', value)\nif match_colon:\n    risk_level = match_colon.group(2).upper()\n    return f\"Risk {risk_level}\"\nmatch_question = re.search(r'(\\w+) \\?', value, re.IGNORECASE)\nif match_question:\n    risk_level = match_question.group(1).lower()\n    return f\"Risk {risk_level}\"\nmatch_brackets = re.search(r'\\[(\\w+)\\]', value, re.IGNORECASE)\nif match_brackets:\n    risk_level = match_brackets.group(1).lower()\n    return f\"Risk {risk_level}\"\nelse:\n    return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column Risk using expression jython:import re\nmatch_upper = re.search(r'[Rr]isk \\s+ (\\w+)', value, re.IGNORECASE)\nif match_upper:\n    risk_level = match_upper.group(1).lower()\n    return f\"Risk {risk_level}\"\nmatch_colon = re.search(r'(\\w+) \\(([A-Z]+)\\)', value)\nif match_colon:\n    risk_level = match_colon.group(2).upper()\n    return f\"Risk {risk_level}\"\nmatch_question = re.search(r'(\\w+) \\?', value, re.IGNORECASE)\nif match_question:\n    risk_level = match_question.group(1).lower()\n    return f\"Risk {risk_level}\"\nmatch_brackets = re.search(r'\\[(\\w+)\\]', value, re.IGNORECASE)\nif match_brackets:\n    risk_level = match_brackets.group(1).lower()\n    return f\"Risk {risk_level}\"\nelse:\n    return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "Risk",
        "expression": "value.toUppercase()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column Risk using expression value.toUppercase()"
    },
    {
        "op": "core/mass-edit",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "Risk",
        "expression": "value",
        "edits": [
            {
                "from": [
                    "RISK 1 (HIGH?)",
                    "RISK 1 (HIGH;)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Risk 1 (High)"
            },
            {
                "from": [
                    "RISK 3 (LOW)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Risk 3 (Low)"
            },
            {
                "from": [
                    "RISK 2 (MEDIUM)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Risk 2 (Medium)"
            }
        ],
        "description": "Mass edit cells in column Risk"
    }
]