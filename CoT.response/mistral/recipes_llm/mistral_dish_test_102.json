[
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match1 = re.search(r'\\s+', value) # Remove extra spaces\n   if match1:\n       value = value.replace(' ', '')\n\n   match2 = re.search(r'[A-Za-z]+ \\([^)]*\\)', value) # Remove brackets and descriptions\n   if match2:\n       value = re.sub(r'[A-Za-z]+ \\([^)]*\\)', '', value)\n\n   match3 = re.search(r'\\.', value) # Remove dots\n   if match3:\n       value = re.sub(r'\\.', '', value)\n\n   match4 = re.search(r'[,;:]+', value) # Remove commas, semicolons, colons\n   if match4:\n       value = re.sub(r'[,;:]+', ' ', value)\n\n   return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match1 = re.search(r'\\s+', value) # Remove extra spaces\n   if match1:\n       value = value.replace(' ', '')\n\n   match2 = re.search(r'[A-Za-z]+ \\([^)]*\\)', value) # Remove brackets and descriptions\n   if match2:\n       value = re.sub(r'[A-Za-z]+ \\([^)]*\\)', '', value)\n\n   match3 = re.search(r'\\.', value) # Remove dots\n   if match3:\n       value = re.sub(r'\\.', '', value)\n\n   match4 = re.search(r'[,;:]+', value) # Remove commas, semicolons, colons\n   if match4:\n       value = re.sub(r'[,;:]+', ' ', value)\n\n   return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\\nif not value.isalpha():\\n    value = re.sub(r'[^a-zA-Z]', '', value)\\nvalue = value.lower()\\nreturn value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\\nif not value.isalpha():\\n    value = re.sub(r'[^a-zA-Z]', '', value)\\nvalue = value.lower()\\nreturn value\nreturn value"
    },
    {
        "op": "core/mass-edit",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "value",
        "edits": [
            {
                "from": [
                    "Schildkrotensuppe echt, \"Lacroix\""
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Schildkrotensuppe Lacroix"
            },
            {
                "from": [
                    "Konigsberger Klops in Kapernsauce, Rote Bete, Kartoffeln"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Konigsberger Klops with Capers, Red Beetroot, Potatoes"
            },
            {
                "from": [
                    "Coffee Sundae"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Coffee Sundae"
            },
            {
                "from": [
                    "[Hot + Buns]"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Hot Dog"
            },
            {
                "from": [
                    "Filet of beef with mushrooms"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Filet Mignon with Mushrooms"
            },
            {
                "from": [
                    "Sparkling burgundy"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Sparkling Burgundy Wine"
            },
            {
                "from": [
                    "Unjointed Fried Half Spring Chicken on Toast, Country Gravy"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Fried Half Spring Chicken, Country Gravy"
            },
            {
                "from": [
                    "Eischaum-Nocken"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Champagne Nuggets"
            },
            {
                "from": [
                    "Roast spring lamb, mint sauce (ready)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Roast Spring Lamb with Mint Sauce (Ready)"
            },
            {
                "from": [
                    "Ziti with Calabrese sauce"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Ziti with Calabrese Sauce"
            },
            {
                "from": [
                    "creme du nord"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Northern Cream"
            },
            {
                "from": [
                    "Individual Wedding Cakes for Everybody"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Individual Wedding Cake"
            },
            {
                "from": [
                    "Sweetbread, Tzarine"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Sweetbread, Czarina"
            },
            {
                "from": [
                    "coffee Ice Cream, caramel sauce"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Coffee Ice Cream with Caramel Sauce"
            },
            {
                "from": [
                    "Toast au Lait"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Milk Toast"
            },
            {
                "from": [
                    "Hot Wagon Service"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Hot Cart Service"
            },
            {
                "from": [
                    "[Tomatoes or Cucumbers and Lettuce]"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Salad (Tomatoes, Cucumbers, and Lettuce)"
            },
            {
                "from": [
                    "Sea Food a la Miramar."
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Miramar-style Seafood"
            },
            {
                "from": [
                    "Vol au Vent of Chicken, Fresh String Beans, Straw Potatoes, Choice of Salad or Dessert, Coffee or Tea"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Chicken Vol au Vent with Fresh Green Beans, Straw Potatoes, and a choice of Salad or Dessert, Coffee or Tea"
            },
            {
                "from": [
                    "Hollandaise-Salat"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Hollandaise Salad"
            }
        ],
        "description": "Mass edit cells in column name"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "value.trim()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression value.trim()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   if value.lower().startswith(\"the \"):\n       return value[4:]\n   elif re.search(r'\\s+', value):\n       return value.replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\)', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\) [A-Za-z]+', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\) [A-Za-z]+ [A-Za-z]+', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\) [A-Za-z]+ [A-Za-z]+ [A-Za-z]+', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   else:\n       return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   if value.lower().startswith(\"the \"):\n       return value[4:]\n   elif re.search(r'\\s+', value):\n       return value.replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\)', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\) [A-Za-z]+', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\) [A-Za-z]+ [A-Za-z]+', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   elif re.search(r'[A-Za-z]+ \\([A-Za-z]+\\) [A-Za-z]+ [A-Za-z]+ [A-Za-z]+', value):\n       return re.sub(r'\\s+', '', value).replace(' ', '_').replace('.', '').replace(',', '').replace('[', '').replace(']', '').replace(';', '').replace(':', '')\n   else:\n       return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match_list = [re.search(r'\\[.*?\\]', value), re.search(r'[^a-zA-Z0-9\\s]+', value)]\n   for match in match_list:\n       if match:\n           value = match.group(0).replace(' ', '')\n           value = re.sub(match.group(0), '', value)\n   value = value.strip().lower()\n   return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match_list = [re.search(r'\\[.*?\\]', value), re.search(r'[^a-zA-Z0-9\\s]+', value)]\n   for match in match_list:\n       if match:\n           value = match.group(0).replace(' ', '')\n           value = re.sub(match.group(0), '', value)\n   value = value.strip().lower()\n   return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\nmatch = re.search(r'[^a-zA-Z\\s]', value)\nif match:\n    value = re.sub(r'[^a-zA-Z\\s]', '', value).lower()\nelse:\n    value = value.lower()\nreturn value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\nmatch = re.search(r'[^a-zA-Z\\s]', value)\nif match:\n    value = re.sub(r'[^a-zA-Z\\s]', '', value).lower()\nelse:\n    value = value.lower()\nreturn value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "times_appeared",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column times_appeared using expression value.toNumber()"
    }
]