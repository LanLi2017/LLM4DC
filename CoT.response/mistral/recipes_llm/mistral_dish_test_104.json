[
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "value.trim()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression value.trim()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match_spaces = re.search(r'\\s+', value)\n   match_symbols = re.search(r'[[]\\[\\];,.:!?/{}()\\*\\^&%$#@\\-_=+|~\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match_spaces = re.search(r'\\s+', value)\n   match_symbols = re.search(r'[[]\\[\\];,.:!?/{}()\\*\\^&%$#@\\-_=+|~\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   if re.search(r'\\[|\\]', value):\n      return re.sub(r'\\[|\\]', '', value)\n   elif re.search(r' \\w+ ', value):\n      return re.sub(r' \\w+ ', ' ', value)\n   elif re.search(r'\\s+', value):\n      return re.sub(r'\\s+', ' ', value).strip()\n   elif re.search(r'(\\w+ )(\\w+)', value):\n      return value.lower().replace(' ', '_').replace('_', ' ')\n   elif re.search(r'(\\w+)(\\s+of\\s+(\\w+))', value):\n      return value.replace(' of ', ' ').replace(' ', '_').replace('_', ' ') + ' ' + value.split()[2]\n   elif re.search(r'\\w+\\s*(tomatoe|Tomatoe|Tomatoes|tomatoes)', value):\n      return value.replace(' tomatoe', 'tomato').replace(' Tomatoe', 'Tomato').replace('tomatoes', 'Tomato').replace(' Tomatoes', 'Tomato')\n   elif re.search(r'\\w+\\s*(sce|Sce|sc)', value):\n      return value.replace(' sce', 'se').replace(' Sce', 'Se').replace('sc', '')\n   elif re.search(r'(\\w+) (\\w+) (\\w+)', value):\n      return value.lower().replace(' ', '_').replace('_', ' ') + ' ' + value.split()[2] + ' ' + value.split()[3]\n   else:\n      return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   if re.search(r'\\[|\\]', value):\n      return re.sub(r'\\[|\\]', '', value)\n   elif re.search(r' \\w+ ', value):\n      return re.sub(r' \\w+ ', ' ', value)\n   elif re.search(r'\\s+', value):\n      return re.sub(r'\\s+', ' ', value).strip()\n   elif re.search(r'(\\w+ )(\\w+)', value):\n      return value.lower().replace(' ', '_').replace('_', ' ')\n   elif re.search(r'(\\w+)(\\s+of\\s+(\\w+))', value):\n      return value.replace(' of ', ' ').replace(' ', '_').replace('_', ' ') + ' ' + value.split()[2]\n   elif re.search(r'\\w+\\s*(tomatoe|Tomatoe|Tomatoes|tomatoes)', value):\n      return value.replace(' tomatoe', 'tomato').replace(' Tomatoe', 'Tomato').replace('tomatoes', 'Tomato').replace(' Tomatoes', 'Tomato')\n   elif re.search(r'\\w+\\s*(sce|Sce|sc)', value):\n      return value.replace(' sce', 'se').replace(' Sce', 'Se').replace('sc', '')\n   elif re.search(r'(\\w+) (\\w+) (\\w+)', value):\n      return value.lower().replace(' ', '_').replace('_', ' ') + ' ' + value.split()[2] + ' ' + value.split()[3]\n   else:\n      return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match_spaces = re.search(r'\\s{2,}', value)\n   match_special_chars = re.search(r'[[\\]\\;\\:\\.\\(\\)]', value)\n   match_case = re.search(r'(?i)\\b[a-z]+\\b', value)\n\n   if match_spaces:\n       value = re.sub(r'\\s{2,}', ' ',value)\n\n   if match_special_chars:\n       value = re.sub(r'[\\[\\]\\;\\:\\.\\(\\)]', '', value)\n\n   if match_case:\n       value = match_case.group(0).upper()\n\n   return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match_spaces = re.search(r'\\s{2,}', value)\n   match_special_chars = re.search(r'[[\\]\\;\\:\\.\\(\\)]', value)\n   match_case = re.search(r'(?i)\\b[a-z]+\\b', value)\n\n   if match_spaces:\n       value = re.sub(r'\\s{2,}', ' ',value)\n\n   if match_special_chars:\n       value = re.sub(r'[\\[\\]\\;\\:\\.\\(\\)]', '', value)\n\n   if match_case:\n       value = match_case.group(0).upper()\n\n   return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n\n   # Lowercase all characters in the cell value\n   value = value.lower()\n\n   # Remove any non-alphanumeric characters except hyphen and space\n   value = re.sub(r'[^a-z0-9-\\s]', '', value)\n\n   # Replace multiple spaces with a single space\n   value = re.sub(r'\\s{2,}', ' ', value)\n\n   # Remove leading and trailing spaces\n   value = value.strip()\n\n   # Capitalize the first letter of the cell value\n   value = value.capitalize()\n\n   return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n\n   # Lowercase all characters in the cell value\n   value = value.lower()\n\n   # Remove any non-alphanumeric characters except hyphen and space\n   value = re.sub(r'[^a-z0-9-\\s]', '', value)\n\n   # Replace multiple spaces with a single space\n   value = re.sub(r'\\s{2,}', ' ', value)\n\n   # Remove leading and trailing spaces\n   value = value.strip()\n\n   # Capitalize the first letter of the cell value\n   value = value.capitalize()\n\n   return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match1 = re.search(r'[A-Za-z]+,', value) # match any string followed by a comma\n   match2 = re.search(r'\\s+[\\w\\s]+\\b', value) # match one or more whitespaces followed by any word\n   if match1 and match2:\n      value = match1.group(0).replace(',', '') # remove the comma from the matched string\n      value = re.sub(r'\\s+', ' ', value) # remove extra whitespaces\n      return value\n   elif re.search(r'[A-Za-z]+', value): # if the cell contains only a word, consider it as a dish name\n      return value\n   else:\n      return None\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match1 = re.search(r'[A-Za-z]+,', value) # match any string followed by a comma\n   match2 = re.search(r'\\s+[\\w\\s]+\\b', value) # match one or more whitespaces followed by any word\n   if match1 and match2:\n      value = match1.group(0).replace(',', '') # remove the comma from the matched string\n      value = re.sub(r'\\s+', ' ', value) # remove extra whitespaces\n      return value\n   elif re.search(r'[A-Za-z]+', value): # if the cell contains only a word, consider it as a dish name\n      return value\n   else:\n      return None\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match1 = re.search(r'\\s+', value) # Remove extra spaces\n   value = value.strip() if match1 else value\n\n   match2 = re.search(r'[A-Za-z]+ \\([A-Za-z]+\\)', value) # Remove dish type in brackets\n   value = value.replace(' ', '').replace('(', '').replace(')', '') if match2 else value\n\n   match3 = re.search(r'[.,!?:;]+$', value) # Remove punctuation at the end of the string\n   value = value[:-1] if match3 else value\n\n   match4 = re.search(r'\\b(hot|cold|fresh|boiled|fried|grilled|sauteed|roasted|broiled|baked|marinated|pickled|preserves)\\b', value) # Standardize dish type\n   if match4:\n       value = 'Dish' + match4.group(0).capitalize()\n\n   return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match1 = re.search(r'\\s+', value) # Remove extra spaces\n   value = value.strip() if match1 else value\n\n   match2 = re.search(r'[A-Za-z]+ \\([A-Za-z]+\\)', value) # Remove dish type in brackets\n   value = value.replace(' ', '').replace('(', '').replace(')', '') if match2 else value\n\n   match3 = re.search(r'[.,!?:;]+$', value) # Remove punctuation at the end of the string\n   value = value[:-1] if match3 else value\n\n   match4 = re.search(r'\\b(hot|cold|fresh|boiled|fried|grilled|sauteed|roasted|broiled|baked|marinated|pickled|preserves)\\b', value) # Standardize dish type\n   if match4:\n       value = 'Dish' + match4.group(0).capitalize()\n\n   return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   import pandas as pd\n\n   # Convert all strings to lowercase\n   value = value.lower()\n\n   # Remove extra spaces and special characters except comma, hyphen, and period\n   value = re.sub(r'\\s{2,}|[^a-z0-9,\\-\\.\\s]', '', value)\n\n   # Split the string by comma or hyphen and create a list of items\n   items = value.split(',') if ',' in value else [value.split('-')[0], value]\n\n   # Remove duplicates from the list of items\n   items = list(set(items))\n\n   # Create a new column for pricing information based on the presence of dollar sign or percentage symbol\n   has_price = False\n   if '$' in value or '%' in value:\n       has_price = True\n\n   # If there is no pricing information, set the price to None\n   if not has_price:\n       items[-1] += ' (No Price)'\n\n   # Return the list of standardized items and the boolean flag for pricing information\n   return pd.Series([items, has_price])\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   import pandas as pd\n\n   # Convert all strings to lowercase\n   value = value.lower()\n\n   # Remove extra spaces and special characters except comma, hyphen, and period\n   value = re.sub(r'\\s{2,}|[^a-z0-9,\\-\\.\\s]', '', value)\n\n   # Split the string by comma or hyphen and create a list of items\n   items = value.split(',') if ',' in value else [value.split('-')[0], value]\n\n   # Remove duplicates from the list of items\n   items = list(set(items))\n\n   # Create a new column for pricing information based on the presence of dollar sign or percentage symbol\n   has_price = False\n   if '$' in value or '%' in value:\n       has_price = True\n\n   # If there is no pricing information, set the price to None\n   if not has_price:\n       items[-1] += ' (No Price)'\n\n   # Return the list of standardized items and the boolean flag for pricing information\n   return pd.Series([items, has_price])\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match1 = re.search(r'\\[.*\\]\\s*', value) # remove brackets\n   match2 = re.search(r'[,;.:]', value) # remove punctuations\n   match3 = re.search(r'\\s+', value) # remove extra spaces\n   if match1 or match2:\n      value = value.lower() # convert to lowercase\n      value = re.sub(r'\\s+', ' ', value) # remove extra spaces\n      value = re.sub(r'[,;.:]', '', value) # remove punctuations\n      value = re.sub(r'\\[.*\\]\\s*', '', value) # remove brackets\n   return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match1 = re.search(r'\\[.*\\]\\s*', value) # remove brackets\n   match2 = re.search(r'[,;.:]', value) # remove punctuations\n   match3 = re.search(r'\\s+', value) # remove extra spaces\n   if match1 or match2:\n      value = value.lower() # convert to lowercase\n      value = re.sub(r'\\s+', ' ', value) # remove extra spaces\n      value = re.sub(r'[,;.:]', '', value) # remove punctuations\n      value = re.sub(r'\\[.*\\]\\s*', '', value) # remove brackets\n   return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "highest_price",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column highest_price using expression value.toNumber()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "times_appeared",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column times_appeared using expression value.toNumber()"
    }
]