[
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   import collections\n   # lowercase all values\n   value = value.lower()\n   # remove non-alphanumeric characters\n   value = re.sub(r'\\W+', ' ', value).strip()\n   # split the string into words\n   words = value.split()\n   # group similar words together\n   grouped_words = collections.GroupBy(words, key=lambda word: word.isalpha())\n   # create a dictionary to store unique words and their counts\n   word_counts = {}\n   for group, group_values in grouped_words:\n       if group:\n           for word in group_values:\n               if word not in word_counts:\n                   word_counts[word] = 1\n               else:\n                   word_counts[word] += 1\n   # sort the dictionary by value (count)\n   sorted_word_counts = sorted(word_counts.items(), key=lambda item: item[1], reverse=True)\n   # join the most frequent words together to form a standardized string\n   standardized_value = ' '.join([word for word, count in sorted_word_counts if count > 1][0])\n   # if there is only one word left, return it as it is\n   if len(standardized_value.split()) == 1:\n       return standardized_value\n   else:\n       return standardized_value + ' '.join([word for word, count in sorted_word_counts if count > 1][1:])\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   import collections\n   # lowercase all values\n   value = value.lower()\n   # remove non-alphanumeric characters\n   value = re.sub(r'\\W+', ' ', value).strip()\n   # split the string into words\n   words = value.split()\n   # group similar words together\n   grouped_words = collections.GroupBy(words, key=lambda word: word.isalpha())\n   # create a dictionary to store unique words and their counts\n   word_counts = {}\n   for group, group_values in grouped_words:\n       if group:\n           for word in group_values:\n               if word not in word_counts:\n                   word_counts[word] = 1\n               else:\n                   word_counts[word] += 1\n   # sort the dictionary by value (count)\n   sorted_word_counts = sorted(word_counts.items(), key=lambda item: item[1], reverse=True)\n   # join the most frequent words together to form a standardized string\n   standardized_value = ' '.join([word for word, count in sorted_word_counts if count > 1][0])\n   # if there is only one word left, return it as it is\n   if len(standardized_value.split()) == 1:\n       return standardized_value\n   else:\n       return standardized_value + ' '.join([word for word, count in sorted_word_counts if count > 1][1:])\nreturn value"
    },
    {
        "op": "core/mass-edit",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "value",
        "edits": [
            {
                "from": [
                    "[Bread]",
                    "[egg]"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Bread"
            },
            {
                "from": [
                    "and Butter: White"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Butter, White"
            },
            {
                "from": [
                    "Potatoes, sautees or stewed"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Potatoes, Sauteed or Stewed"
            },
            {
                "from": [
                    "Old Seal Brandy, pony"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Old Seal Brandy, Pony"
            },
            {
                "from": [
                    "Macedoine de Fruits au Marasquin"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Macedoine de Fruits au Marasquin"
            },
            {
                "from": [
                    "Tetrazini"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Tetrazini"
            },
            {
                "from": [
                    "Strawberry, peach or raspberry jam"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Strawberry Jam, Peach Jam, Raspberry Jam"
            },
            {
                "from": [
                    "Fresh Fruit Salad, Country Cottage Cheese, Sour Cream Salad Dressing"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Fresh Fruit Salad, Country Cottage Cheese, Sour Cream Salad Dressing"
            },
            {
                "from": [
                    "[Coffee]",
                    "[Thee]"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Coffee"
            },
            {
                "from": [
                    "per pot or Cup"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Per Pot or Cup"
            },
            {
                "from": [
                    "Chateau Latour Blanche B. & G. Sauternes"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Ch\u00e2teau Latour Blanche B. & G. Sauternes"
            },
            {
                "from": [
                    "Saint-marceaux very dry"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Saint-Marcaux Very Dry"
            },
            {
                "from": [
                    "Malteser [Reis-Creme]"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Malteser (Rice Cream)"
            },
            {
                "from": [
                    "Romaine and Pineapple Salad"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Romaine, Pineapple Salad"
            },
            {
                "from": [
                    "1954er Ockfener Beckstein"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "1954er Ockfener Beckstein"
            },
            {
                "from": [
                    "Tenderloin steak, with truffles"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Tenderloin Steak, Truffles"
            },
            {
                "from": [
                    "Thee, Kaffee, Hafercacao"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Tea, Coffee, H\u00e4ferk\u00e4se"
            },
            {
                "from": [
                    "Consomme Belle Fermiere"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Consomm\u00e9 Belle Fermi\u00e8re"
            },
            {
                "from": [
                    "1964er Chateau La Tour Gayet, Cotes de Blaye A.C."
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "1964er Ch\u00e2teau La Tour Gayet, C\u00f4tes de Blaye A.C."
            },
            {
                "from": [
                    "Bean Curd with Chinese Mushrooms"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Bean Curd with Chinese Mushroom"
            },
            {
                "from": [
                    "Roast Hot House Baby Lamb, Mint Sauce"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Roast Hot House Baby Lamb, Mint Sauce"
            },
            {
                "from": [
                    "Bourbon whisky Four Roses 4 cl"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Bourbon Whisky Four Roses 4cl"
            }
        ],
        "description": "Mass edit cells in column name"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match_upper = re.search(r'\\b[A-Z]{2,}\\b', value)\n   if match_upper:\n       value = value.lower()\n   match_special = re.search(r'[\\W]', value)\n   if match_special:\n       value = value.replace(' ', '_').replace('_', ' ').replace('-', ' ').replace('\\'', ' ').replace('\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match_upper = re.search(r'\\b[A-Z]{2,}\\b', value)\n   if match_upper:\n       value = value.lower()\n   match_special = re.search(r'[\\W]', value)\n   if match_special:\n       value = value.replace(' ', '_').replace('_', ' ').replace('-', ' ').replace('\\'', ' ').replace('\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "lowest_price",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column lowest_price using expression value.toNumber()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "highest_price",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column highest_price using expression value.toNumber()"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "highest_price",
        "expression": "value.toNumber()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column highest_price using expression value.toNumber()"
    }
]