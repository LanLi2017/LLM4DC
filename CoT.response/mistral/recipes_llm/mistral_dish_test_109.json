[
    {
        "op": "core/mass-edit",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "value",
        "edits": [
            {
                "from": [
                    "Wehlener Rosenberg"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Wehlener-Rosenberg"
            },
            {
                "from": [
                    "omelets",
                    "omelet"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Omelette"
            },
            {
                "from": [
                    "[",
                    "]"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": ""
            },
            {
                "from": [
                    "L'Entrecote a la Bercy - New York strip steak, with shallots, and French fried potatoes.",
                    "L'Entrecote a la Bercy-New York strip steak with shallots and French fried potatoes."
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "L'Entrecote \u00e0 la Bercy - Steak New York \u00e0 l'\u00e9chalotte et pommes frites."
            },
            {
                "from": [
                    "Bombe Regence"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Bombe R\u00e9gence"
            },
            {
                "from": [
                    "Fried Mackerel, Mustard sauce"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Fried Mackerel with Mustard Sauce"
            },
            {
                "from": [
                    "Potatoes, sautees or stewed"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Saut\u00e9ed or Stewed Potatoes"
            },
            {
                "from": [
                    "Brandy Peaches Preserves"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Brandy Peach Preserves"
            },
            {
                "from": [
                    "Brandy (Domestic)"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Domestic Brandy"
            },
            {
                "from": [
                    "(Beef) Tamale"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Beef Tamale"
            },
            {
                "from": [
                    "Ecarlate"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "\u00c9carlate"
            },
            {
                "from": [
                    "*Filet of Sole with Fresh Spinach Florentine"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Filet de Sole \u00e0 la Florentine avec \u00e9pinards frais"
            },
            {
                "from": [
                    "Lady Cakes"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Ladyfingers"
            },
            {
                "from": [
                    "Veuve Clicqout, Gold Label, Brut"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Veuve Clicquot Gold Label Brut"
            },
            {
                "from": [
                    "Supreme of Chicken, saute Cacciatora"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Supreme de Poulet \u00e0 la Cacciatora"
            },
            {
                "from": [
                    "Country Sausages, Fried Bananas"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Country Sausages with Fried Bananas"
            },
            {
                "from": [
                    "Broiled Small Steak with   Potatoes"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Broiled Petite Steak with Potatoes"
            },
            {
                "from": [
                    "Cafe Pudding"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Caf\u00e9 Pudding"
            },
            {
                "from": [
                    "Alter SHERRY"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Sherry"
            },
            {
                "from": [
                    "macedoine de Fruits au Marasquin"
                ],
                "fromBlank": false,
                "fromError": false,
                "to": "Maraschino Fruit Salad"
            }
        ],
        "description": "Mass edit cells in column name"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "jython:import re\n   match1 = re.search(r'\\s+', value) # remove extra spaces\n   match2 = re.search(r'[A-Za-z]+ \\w+', value) # check for two words with at least one letter each\n   if match1 and not match2:\n      return value.replace(' ', '_') # replace spaces with underscores\n   elif match2:\n      return value.lower() # convert to lowercase\n   else:\n      return value\nreturn value",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression jython:import re\n   match1 = re.search(r'\\s+', value) # remove extra spaces\n   match2 = re.search(r'[A-Za-z]+ \\w+', value) # check for two words with at least one letter each\n   if match1 and not match2:\n      return value.replace(' ', '_') # replace spaces with underscores\n   elif match2:\n      return value.lower() # convert to lowercase\n   else:\n      return value\nreturn value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "name",
        "expression": "value.trim()",
        "onError": "set-to-blank",
        "repeat": false,
        "repeatCount": 10,
        "description": "Text transform on cells in column name using expression value.trim()"
    }
]